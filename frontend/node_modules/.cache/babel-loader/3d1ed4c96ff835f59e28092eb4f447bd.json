{"ast":null,"code":"import _slicedToArray from \"/Users/mateusz/Projects/website/django_react/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/mateusz/Projects/website/django_react/frontend/src/components/VideoOnHover/Video.js\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./styles.module.css\";\n\nvar Video = function Video(_ref) {\n  var src = _ref.src,\n      width = _ref.width,\n      height = _ref.height,\n      play = _ref.play,\n      muted = _ref.muted,\n      loop = _ref.loop,\n      image = _ref.image,\n      children = _ref.children;\n\n  var _useState = useState(play || false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isPlaying = _useState2[0],\n      setIsPlaying = _useState2[1];\n\n  var videoElem = useRef(null); // Play or pause the video depending on the play property\n\n  if (!play && videoElem.current) {\n    videoElem.current.load();\n  } else if (play && videoElem.current) {\n    videoElem.current.play();\n  }\n\n  useEffect(function () {\n    // Update the isPlaying state when the props will change\n    setIsPlaying(play);\n  });\n\n  function handlePlay() {\n    videoElem.current.play();\n    setIsPlaying(true);\n  }\n\n  function handlePause() {\n    videoElem.current.pause();\n    setIsPlaying(false);\n  }\n\n  return React.createElement(\"div\", {\n    className: styles.container,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"video\", {\n    width: width,\n    height: height,\n    poster: image,\n    autoPlay: play,\n    muted: muted,\n    loop: loop,\n    preload: \"false\",\n    className: styles.video,\n    ref: videoElem,\n    onClick: isPlaying ? handlePause : undefined,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"source\", {\n    src: src,\n    type: \"video/mp4\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: styles.controls,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.cloneElement(children, {\n    play: handlePlay,\n    hidden: isPlaying ? true : false\n  })));\n};\n\nVideo.propTypes = {\n  src: PropTypes.string.isRequired,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  play: PropTypes.bool,\n  muted: PropTypes.bool,\n  loop: PropTypes.bool,\n  image: PropTypes.string,\n\n  /**\n   * Controls. Only one element can be given.\n   */\n  children: PropTypes.element\n};\nVideo.defaultProps = {\n  width: \"100%\",\n  height: 'auto'\n};\nexport default Video;","map":{"version":3,"sources":["/Users/mateusz/Projects/website/django_react/frontend/src/components/VideoOnHover/Video.js"],"names":["React","useRef","useState","useEffect","PropTypes","styles","Video","src","width","height","play","muted","loop","image","children","isPlaying","setIsPlaying","videoElem","current","load","handlePlay","handlePause","pause","container","video","undefined","controls","cloneElement","hidden","propTypes","string","isRequired","oneOfType","number","bool","element","defaultProps"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./styles.module.css\";\n\nconst Video = ({ src, width, height, play, muted, loop, image, children }) => {\n  const [isPlaying, setIsPlaying] = useState(play || false);\n  const videoElem = useRef(null);\n\n  // Play or pause the video depending on the play property\n  if (!play && videoElem.current) {\n    videoElem.current.load();\n  } else if (play && videoElem.current) {\n    videoElem.current.play();\n  }\n\n  useEffect(() => {\n    // Update the isPlaying state when the props will change\n    setIsPlaying(play);\n  });\n\n  function handlePlay() {\n    videoElem.current.play();\n    setIsPlaying(true);\n  }\n  function handlePause() {\n    videoElem.current.pause();\n    setIsPlaying(false);\n  }\n\n  return (\n    <div className={styles.container}>\n      <video\n        width={width}\n        height={height}\n        poster={image}\n        autoPlay={play}\n        muted={muted}\n        loop={loop}\n        preload='false'\n        className={styles.video}\n        ref={videoElem}\n        onClick={isPlaying ? handlePause : undefined}\n      >\n        <source src={src} type=\"video/mp4\" />\n      </video>\n      <div className={styles.controls}>\n        {React.cloneElement(children, {\n          play: handlePlay,\n          hidden: isPlaying ? true : false\n        })}\n      </div>\n    </div>\n  );\n};\n\nVideo.propTypes = {\n  src: PropTypes.string.isRequired,\n  width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  play: PropTypes.bool,\n  muted: PropTypes.bool,\n  loop: PropTypes.bool,\n  image: PropTypes.string,\n  /**\n   * Controls. Only one element can be given.\n   */\n  children: PropTypes.element\n};\n\nVideo.defaultProps = {\n  width: \"100%\",\n  height: 'auto'\n};\n\nexport default Video;\n"]},"metadata":{},"sourceType":"module"}